/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IOracle {
  export type ContentStruct = { contentType: string; value: string };

  export type ContentStructOutput = [contentType: string, value: string] & {
    contentType: string;
    value: string;
  };

  export type MessageStruct = {
    role: string;
    content: IOracle.ContentStruct[];
  };

  export type MessageStructOutput = [
    role: string,
    content: IOracle.ContentStructOutput[]
  ] & { role: string; content: IOracle.ContentStructOutput[] };

  export type GroqResponseStruct = {
    id: string;
    content: string;
    created: BigNumberish;
    model: string;
    systemFingerprint: string;
    object: string;
    completionTokens: BigNumberish;
    promptTokens: BigNumberish;
    totalTokens: BigNumberish;
  };

  export type GroqResponseStructOutput = [
    id: string,
    content: string,
    created: bigint,
    model: string,
    systemFingerprint: string,
    object: string,
    completionTokens: bigint,
    promptTokens: bigint,
    totalTokens: bigint
  ] & {
    id: string;
    content: string;
    created: bigint;
    model: string;
    systemFingerprint: string;
    object: string;
    completionTokens: bigint;
    promptTokens: bigint;
    totalTokens: bigint;
  };

  export type OpenAiResponseStruct = {
    id: string;
    content: string;
    functionName: string;
    functionArguments: string;
    created: BigNumberish;
    model: string;
    systemFingerprint: string;
    object: string;
    completionTokens: BigNumberish;
    promptTokens: BigNumberish;
    totalTokens: BigNumberish;
  };

  export type OpenAiResponseStructOutput = [
    id: string,
    content: string,
    functionName: string,
    functionArguments: string,
    created: bigint,
    model: string,
    systemFingerprint: string,
    object: string,
    completionTokens: bigint,
    promptTokens: bigint,
    totalTokens: bigint
  ] & {
    id: string;
    content: string;
    functionName: string;
    functionArguments: string;
    created: bigint;
    model: string;
    systemFingerprint: string;
    object: string;
    completionTokens: bigint;
    promptTokens: bigint;
    totalTokens: bigint;
  };
}

export interface IChatGptInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getMessageHistory"
      | "getMessageHistoryContents"
      | "getMessageHistoryRoles"
      | "onOracleFunctionResponse"
      | "onOracleGroqLlmResponse"
      | "onOracleKnowledgeBaseQueryResponse"
      | "onOracleLlmResponse"
      | "onOracleOpenAiLlmResponse"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getMessageHistory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMessageHistoryContents",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMessageHistoryRoles",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onOracleFunctionResponse",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "onOracleGroqLlmResponse",
    values: [BigNumberish, IOracle.GroqResponseStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "onOracleKnowledgeBaseQueryResponse",
    values: [BigNumberish, string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "onOracleLlmResponse",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "onOracleOpenAiLlmResponse",
    values: [BigNumberish, IOracle.OpenAiResponseStruct, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getMessageHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMessageHistoryContents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMessageHistoryRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onOracleFunctionResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onOracleGroqLlmResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onOracleKnowledgeBaseQueryResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onOracleLlmResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onOracleOpenAiLlmResponse",
    data: BytesLike
  ): Result;
}

export interface IChatGpt extends BaseContract {
  connect(runner?: ContractRunner | null): IChatGpt;
  waitForDeployment(): Promise<this>;

  interface: IChatGptInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getMessageHistory: TypedContractMethod<
    [callbackId: BigNumberish],
    [IOracle.MessageStructOutput[]],
    "view"
  >;

  getMessageHistoryContents: TypedContractMethod<
    [callbackId: BigNumberish],
    [string[]],
    "view"
  >;

  getMessageHistoryRoles: TypedContractMethod<
    [callbackId: BigNumberish],
    [string[]],
    "view"
  >;

  onOracleFunctionResponse: TypedContractMethod<
    [callbackId: BigNumberish, response: string, errorMessage: string],
    [void],
    "nonpayable"
  >;

  onOracleGroqLlmResponse: TypedContractMethod<
    [
      callbackId: BigNumberish,
      response: IOracle.GroqResponseStruct,
      errorMessage: string
    ],
    [void],
    "nonpayable"
  >;

  onOracleKnowledgeBaseQueryResponse: TypedContractMethod<
    [callbackId: BigNumberish, documents: string[], errorMessage: string],
    [void],
    "nonpayable"
  >;

  onOracleLlmResponse: TypedContractMethod<
    [callbackId: BigNumberish, response: string, errorMessage: string],
    [void],
    "nonpayable"
  >;

  onOracleOpenAiLlmResponse: TypedContractMethod<
    [
      callbackId: BigNumberish,
      response: IOracle.OpenAiResponseStruct,
      errorMessage: string
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getMessageHistory"
  ): TypedContractMethod<
    [callbackId: BigNumberish],
    [IOracle.MessageStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMessageHistoryContents"
  ): TypedContractMethod<[callbackId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getMessageHistoryRoles"
  ): TypedContractMethod<[callbackId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "onOracleFunctionResponse"
  ): TypedContractMethod<
    [callbackId: BigNumberish, response: string, errorMessage: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onOracleGroqLlmResponse"
  ): TypedContractMethod<
    [
      callbackId: BigNumberish,
      response: IOracle.GroqResponseStruct,
      errorMessage: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onOracleKnowledgeBaseQueryResponse"
  ): TypedContractMethod<
    [callbackId: BigNumberish, documents: string[], errorMessage: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onOracleLlmResponse"
  ): TypedContractMethod<
    [callbackId: BigNumberish, response: string, errorMessage: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onOracleOpenAiLlmResponse"
  ): TypedContractMethod<
    [
      callbackId: BigNumberish,
      response: IOracle.OpenAiResponseStruct,
      errorMessage: string
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
