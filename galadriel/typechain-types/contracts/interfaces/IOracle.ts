/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IOracle {
  export type GroqRequestStruct = {
    model: string;
    frequencyPenalty: BigNumberish;
    logitBias: string;
    maxTokens: BigNumberish;
    presencePenalty: BigNumberish;
    responseFormat: string;
    seed: BigNumberish;
    stop: string;
    temperature: BigNumberish;
    topP: BigNumberish;
    user: string;
  };

  export type GroqRequestStructOutput = [
    model: string,
    frequencyPenalty: bigint,
    logitBias: string,
    maxTokens: bigint,
    presencePenalty: bigint,
    responseFormat: string,
    seed: bigint,
    stop: string,
    temperature: bigint,
    topP: bigint,
    user: string
  ] & {
    model: string;
    frequencyPenalty: bigint;
    logitBias: string;
    maxTokens: bigint;
    presencePenalty: bigint;
    responseFormat: string;
    seed: bigint;
    stop: string;
    temperature: bigint;
    topP: bigint;
    user: string;
  };

  export type OpenAiRequestStruct = {
    model: string;
    frequencyPenalty: BigNumberish;
    logitBias: string;
    maxTokens: BigNumberish;
    presencePenalty: BigNumberish;
    responseFormat: string;
    seed: BigNumberish;
    stop: string;
    temperature: BigNumberish;
    topP: BigNumberish;
    tools: string;
    toolChoice: string;
    user: string;
  };

  export type OpenAiRequestStructOutput = [
    model: string,
    frequencyPenalty: bigint,
    logitBias: string,
    maxTokens: bigint,
    presencePenalty: bigint,
    responseFormat: string,
    seed: bigint,
    stop: string,
    temperature: bigint,
    topP: bigint,
    tools: string,
    toolChoice: string,
    user: string
  ] & {
    model: string;
    frequencyPenalty: bigint;
    logitBias: string;
    maxTokens: bigint;
    presencePenalty: bigint;
    responseFormat: string;
    seed: bigint;
    stop: string;
    temperature: bigint;
    topP: bigint;
    tools: string;
    toolChoice: string;
    user: string;
  };
}

export interface IOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createFunctionCall"
      | "createGroqLlmCall"
      | "createKnowledgeBaseQuery"
      | "createLlmCall"
      | "createOpenAiLlmCall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createFunctionCall",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createGroqLlmCall",
    values: [BigNumberish, IOracle.GroqRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createKnowledgeBaseQuery",
    values: [BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createLlmCall",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createOpenAiLlmCall",
    values: [BigNumberish, IOracle.OpenAiRequestStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "createFunctionCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createGroqLlmCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createKnowledgeBaseQuery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLlmCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOpenAiLlmCall",
    data: BytesLike
  ): Result;
}

export interface IOracle extends BaseContract {
  connect(runner?: ContractRunner | null): IOracle;
  waitForDeployment(): Promise<this>;

  interface: IOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createFunctionCall: TypedContractMethod<
    [
      functionCallbackId: BigNumberish,
      functionType: string,
      functionInput: string
    ],
    [bigint],
    "nonpayable"
  >;

  createGroqLlmCall: TypedContractMethod<
    [promptId: BigNumberish, request: IOracle.GroqRequestStruct],
    [bigint],
    "nonpayable"
  >;

  createKnowledgeBaseQuery: TypedContractMethod<
    [
      kbQueryCallbackId: BigNumberish,
      cid: string,
      query: string,
      num_documents: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  createLlmCall: TypedContractMethod<
    [promptId: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  createOpenAiLlmCall: TypedContractMethod<
    [promptId: BigNumberish, request: IOracle.OpenAiRequestStruct],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createFunctionCall"
  ): TypedContractMethod<
    [
      functionCallbackId: BigNumberish,
      functionType: string,
      functionInput: string
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createGroqLlmCall"
  ): TypedContractMethod<
    [promptId: BigNumberish, request: IOracle.GroqRequestStruct],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createKnowledgeBaseQuery"
  ): TypedContractMethod<
    [
      kbQueryCallbackId: BigNumberish,
      cid: string,
      query: string,
      num_documents: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createLlmCall"
  ): TypedContractMethod<[promptId: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "createOpenAiLlmCall"
  ): TypedContractMethod<
    [promptId: BigNumberish, request: IOracle.OpenAiRequestStruct],
    [bigint],
    "nonpayable"
  >;

  filters: {};
}
