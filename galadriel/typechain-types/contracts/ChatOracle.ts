/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IOracle {
  export type GroqResponseStruct = {
    id: string;
    content: string;
    created: BigNumberish;
    model: string;
    systemFingerprint: string;
    object: string;
    completionTokens: BigNumberish;
    promptTokens: BigNumberish;
    totalTokens: BigNumberish;
  };

  export type GroqResponseStructOutput = [
    id: string,
    content: string,
    created: bigint,
    model: string,
    systemFingerprint: string,
    object: string,
    completionTokens: bigint,
    promptTokens: bigint,
    totalTokens: bigint
  ] & {
    id: string;
    content: string;
    created: bigint;
    model: string;
    systemFingerprint: string;
    object: string;
    completionTokens: bigint;
    promptTokens: bigint;
    totalTokens: bigint;
  };

  export type OpenAiResponseStruct = {
    id: string;
    content: string;
    functionName: string;
    functionArguments: string;
    created: BigNumberish;
    model: string;
    systemFingerprint: string;
    object: string;
    completionTokens: BigNumberish;
    promptTokens: BigNumberish;
    totalTokens: BigNumberish;
  };

  export type OpenAiResponseStructOutput = [
    id: string,
    content: string,
    functionName: string,
    functionArguments: string,
    created: bigint,
    model: string,
    systemFingerprint: string,
    object: string,
    completionTokens: bigint,
    promptTokens: bigint,
    totalTokens: bigint
  ] & {
    id: string;
    content: string;
    functionName: string;
    functionArguments: string;
    created: bigint;
    model: string;
    systemFingerprint: string;
    object: string;
    completionTokens: bigint;
    promptTokens: bigint;
    totalTokens: bigint;
  };

  export type GroqRequestStruct = {
    model: string;
    frequencyPenalty: BigNumberish;
    logitBias: string;
    maxTokens: BigNumberish;
    presencePenalty: BigNumberish;
    responseFormat: string;
    seed: BigNumberish;
    stop: string;
    temperature: BigNumberish;
    topP: BigNumberish;
    user: string;
  };

  export type GroqRequestStructOutput = [
    model: string,
    frequencyPenalty: bigint,
    logitBias: string,
    maxTokens: bigint,
    presencePenalty: bigint,
    responseFormat: string,
    seed: bigint,
    stop: string,
    temperature: bigint,
    topP: bigint,
    user: string
  ] & {
    model: string;
    frequencyPenalty: bigint;
    logitBias: string;
    maxTokens: bigint;
    presencePenalty: bigint;
    responseFormat: string;
    seed: bigint;
    stop: string;
    temperature: bigint;
    topP: bigint;
    user: string;
  };

  export type OpenAiRequestStruct = {
    model: string;
    frequencyPenalty: BigNumberish;
    logitBias: string;
    maxTokens: BigNumberish;
    presencePenalty: BigNumberish;
    responseFormat: string;
    seed: BigNumberish;
    stop: string;
    temperature: BigNumberish;
    topP: BigNumberish;
    tools: string;
    toolChoice: string;
    user: string;
  };

  export type OpenAiRequestStructOutput = [
    model: string,
    frequencyPenalty: bigint,
    logitBias: string,
    maxTokens: bigint,
    presencePenalty: bigint,
    responseFormat: string,
    seed: bigint,
    stop: string,
    temperature: bigint,
    topP: bigint,
    tools: string,
    toolChoice: string,
    user: string
  ] & {
    model: string;
    frequencyPenalty: bigint;
    logitBias: string;
    maxTokens: bigint;
    presencePenalty: bigint;
    responseFormat: string;
    seed: bigint;
    stop: string;
    temperature: bigint;
    topP: bigint;
    tools: string;
    toolChoice: string;
    user: string;
  };

  export type ContentStruct = { contentType: string; value: string };

  export type ContentStructOutput = [contentType: string, value: string] & {
    contentType: string;
    value: string;
  };

  export type MessageStruct = {
    role: string;
    content: IOracle.ContentStruct[];
  };

  export type MessageStructOutput = [
    role: string,
    content: IOracle.ContentStructOutput[]
  ] & { role: string; content: IOracle.ContentStructOutput[] };
}

export interface ChatOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addAttestation"
      | "addFunctionResponse"
      | "addGroqResponse"
      | "addKnowledgeBase"
      | "addKnowledgeBaseIndex"
      | "addKnowledgeBaseQueryResponse"
      | "addOpenAiResponse"
      | "addPcr0Hash"
      | "addResponse"
      | "attestations"
      | "callbackAddresses"
      | "createFunctionCall"
      | "createGroqLlmCall"
      | "createKnowledgeBaseQuery"
      | "createLlmCall"
      | "createOpenAiLlmCall"
      | "functionCallbackAddresses"
      | "functionCallbackIds"
      | "functionInputs"
      | "functionTypes"
      | "functionsCount"
      | "getMessages"
      | "getMessagesAndRoles"
      | "getRoles"
      | "groqConfigurations"
      | "isFunctionProcessed"
      | "isKbIndexingRequestProcessed"
      | "isKbQueryProcessed"
      | "isPromptProcessed"
      | "kbIndexes"
      | "kbIndexingRequestCount"
      | "kbIndexingRequestErrors"
      | "kbIndexingRequests"
      | "kbQueries"
      | "kbQueryCallbackAddresses"
      | "kbQueryCallbackIds"
      | "kbQueryCount"
      | "latestAttestationOwner"
      | "latestPcr0HashOwner"
      | "markFunctionAsProcessed"
      | "markGroqPromptAsProcessed"
      | "markKnowledgeBaseAsProcessed"
      | "markKnowledgeBaseQueryAsProcessed"
      | "markOpenAiPromptAsProcessed"
      | "markPromptAsProcessed"
      | "openAiConfigurations"
      | "pcr0Hashes"
      | "promptCallbackIds"
      | "promptType"
      | "promptTypes"
      | "promptsCount"
      | "updateWhitelist"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FunctionAdded"
      | "KnowledgeBaseIndexRequestAdded"
      | "KnowledgeBaseIndexed"
      | "PromptAdded"
      | "knowledgeBaseQueryAdded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addAttestation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addFunctionResponse",
    values: [BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addGroqResponse",
    values: [BigNumberish, BigNumberish, IOracle.GroqResponseStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addKnowledgeBase",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addKnowledgeBaseIndex",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addKnowledgeBaseQueryResponse",
    values: [BigNumberish, BigNumberish, string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "addOpenAiResponse",
    values: [BigNumberish, BigNumberish, IOracle.OpenAiResponseStruct, string]
  ): string;
  encodeFunctionData(functionFragment: "addPcr0Hash", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addResponse",
    values: [BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "attestations",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "callbackAddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createFunctionCall",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createGroqLlmCall",
    values: [BigNumberish, IOracle.GroqRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createKnowledgeBaseQuery",
    values: [BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createLlmCall",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createOpenAiLlmCall",
    values: [BigNumberish, IOracle.OpenAiRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "functionCallbackAddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "functionCallbackIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "functionInputs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "functionTypes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "functionsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMessages",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMessagesAndRoles",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoles",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "groqConfigurations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isFunctionProcessed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isKbIndexingRequestProcessed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isKbQueryProcessed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isPromptProcessed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "kbIndexes", values: [string]): string;
  encodeFunctionData(
    functionFragment: "kbIndexingRequestCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "kbIndexingRequestErrors",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "kbIndexingRequests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "kbQueries",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "kbQueryCallbackAddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "kbQueryCallbackIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "kbQueryCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestAttestationOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestPcr0HashOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "markFunctionAsProcessed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "markGroqPromptAsProcessed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "markKnowledgeBaseAsProcessed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "markKnowledgeBaseQueryAsProcessed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "markOpenAiPromptAsProcessed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "markPromptAsProcessed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openAiConfigurations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pcr0Hashes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "promptCallbackIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "promptType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "promptTypes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "promptsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateWhitelist",
    values: [AddressLike, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "addAttestation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addFunctionResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addGroqResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addKnowledgeBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addKnowledgeBaseIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addKnowledgeBaseQueryResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addOpenAiResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPcr0Hash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addResponse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "attestations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callbackAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createFunctionCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createGroqLlmCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createKnowledgeBaseQuery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLlmCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOpenAiLlmCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "functionCallbackAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "functionCallbackIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "functionInputs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "functionTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "functionsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMessagesAndRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRoles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "groqConfigurations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFunctionProcessed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isKbIndexingRequestProcessed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isKbQueryProcessed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPromptProcessed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kbIndexes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "kbIndexingRequestCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "kbIndexingRequestErrors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "kbIndexingRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kbQueries", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "kbQueryCallbackAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "kbQueryCallbackIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "kbQueryCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestAttestationOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestPcr0HashOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markFunctionAsProcessed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markGroqPromptAsProcessed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markKnowledgeBaseAsProcessed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markKnowledgeBaseQueryAsProcessed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markOpenAiPromptAsProcessed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markPromptAsProcessed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openAiConfigurations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pcr0Hashes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "promptCallbackIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "promptType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "promptTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "promptsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWhitelist",
    data: BytesLike
  ): Result;
}

export namespace FunctionAddedEvent {
  export type InputTuple = [
    functionId: BigNumberish,
    functionInput: string,
    functionCallbackId: BigNumberish,
    sender: AddressLike
  ];
  export type OutputTuple = [
    functionId: bigint,
    functionInput: string,
    functionCallbackId: bigint,
    sender: string
  ];
  export interface OutputObject {
    functionId: bigint;
    functionInput: string;
    functionCallbackId: bigint;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KnowledgeBaseIndexRequestAddedEvent {
  export type InputTuple = [id: BigNumberish, sender: AddressLike];
  export type OutputTuple = [id: bigint, sender: string];
  export interface OutputObject {
    id: bigint;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KnowledgeBaseIndexedEvent {
  export type InputTuple = [cid: string, indexCid: string];
  export type OutputTuple = [cid: string, indexCid: string];
  export interface OutputObject {
    cid: string;
    indexCid: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PromptAddedEvent {
  export type InputTuple = [
    promptId: BigNumberish,
    promptCallbackId: BigNumberish,
    sender: AddressLike
  ];
  export type OutputTuple = [
    promptId: bigint,
    promptCallbackId: bigint,
    sender: string
  ];
  export interface OutputObject {
    promptId: bigint;
    promptCallbackId: bigint;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace knowledgeBaseQueryAddedEvent {
  export type InputTuple = [kbQueryId: BigNumberish, sender: AddressLike];
  export type OutputTuple = [kbQueryId: bigint, sender: string];
  export interface OutputObject {
    kbQueryId: bigint;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ChatOracle extends BaseContract {
  connect(runner?: ContractRunner | null): ChatOracle;
  waitForDeployment(): Promise<this>;

  interface: ChatOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addAttestation: TypedContractMethod<
    [attestation: string],
    [void],
    "nonpayable"
  >;

  addFunctionResponse: TypedContractMethod<
    [
      functionId: BigNumberish,
      functionCallBackId: BigNumberish,
      response: string,
      errorMessage: string
    ],
    [void],
    "nonpayable"
  >;

  addGroqResponse: TypedContractMethod<
    [
      promptId: BigNumberish,
      promptCallBackId: BigNumberish,
      response: IOracle.GroqResponseStruct,
      errorMessage: string
    ],
    [void],
    "nonpayable"
  >;

  addKnowledgeBase: TypedContractMethod<[cid: string], [void], "nonpayable">;

  addKnowledgeBaseIndex: TypedContractMethod<
    [kbIndexingRequestId: BigNumberish, indexCid: string, error: string],
    [void],
    "nonpayable"
  >;

  addKnowledgeBaseQueryResponse: TypedContractMethod<
    [
      kbQueryId: BigNumberish,
      kbQueryCallbackId: BigNumberish,
      documents: string[],
      errorMessage: string
    ],
    [void],
    "nonpayable"
  >;

  addOpenAiResponse: TypedContractMethod<
    [
      promptId: BigNumberish,
      promptCallBackId: BigNumberish,
      response: IOracle.OpenAiResponseStruct,
      errorMessage: string
    ],
    [void],
    "nonpayable"
  >;

  addPcr0Hash: TypedContractMethod<[pcr0Hash: string], [void], "nonpayable">;

  addResponse: TypedContractMethod<
    [
      promptId: BigNumberish,
      promptCallBackId: BigNumberish,
      response: string,
      errorMessage: string
    ],
    [void],
    "nonpayable"
  >;

  attestations: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  callbackAddresses: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  createFunctionCall: TypedContractMethod<
    [
      functionCallbackId: BigNumberish,
      functionType: string,
      functionInput: string
    ],
    [bigint],
    "nonpayable"
  >;

  createGroqLlmCall: TypedContractMethod<
    [promptCallbackId: BigNumberish, config: IOracle.GroqRequestStruct],
    [bigint],
    "nonpayable"
  >;

  createKnowledgeBaseQuery: TypedContractMethod<
    [
      kbQueryCallbackId: BigNumberish,
      cid: string,
      query: string,
      num_documents: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  createLlmCall: TypedContractMethod<
    [promptCallbackId: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  createOpenAiLlmCall: TypedContractMethod<
    [promptCallbackId: BigNumberish, config: IOracle.OpenAiRequestStruct],
    [bigint],
    "nonpayable"
  >;

  functionCallbackAddresses: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  functionCallbackIds: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  functionInputs: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  functionTypes: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  functionsCount: TypedContractMethod<[], [bigint], "view">;

  getMessages: TypedContractMethod<
    [promptId: BigNumberish, promptCallBackId: BigNumberish],
    [string[]],
    "view"
  >;

  getMessagesAndRoles: TypedContractMethod<
    [promptId: BigNumberish, promptCallBackId: BigNumberish],
    [IOracle.MessageStructOutput[]],
    "view"
  >;

  getRoles: TypedContractMethod<
    [promptId: BigNumberish, promptCallBackId: BigNumberish],
    [string[]],
    "view"
  >;

  groqConfigurations: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        bigint,
        string,
        bigint,
        bigint,
        string,
        bigint,
        string,
        bigint,
        bigint,
        string
      ] & {
        model: string;
        frequencyPenalty: bigint;
        logitBias: string;
        maxTokens: bigint;
        presencePenalty: bigint;
        responseFormat: string;
        seed: bigint;
        stop: string;
        temperature: bigint;
        topP: bigint;
        user: string;
      }
    ],
    "view"
  >;

  isFunctionProcessed: TypedContractMethod<
    [arg0: BigNumberish],
    [boolean],
    "view"
  >;

  isKbIndexingRequestProcessed: TypedContractMethod<
    [arg0: BigNumberish],
    [boolean],
    "view"
  >;

  isKbQueryProcessed: TypedContractMethod<
    [arg0: BigNumberish],
    [boolean],
    "view"
  >;

  isPromptProcessed: TypedContractMethod<
    [arg0: BigNumberish],
    [boolean],
    "view"
  >;

  kbIndexes: TypedContractMethod<[arg0: string], [string], "view">;

  kbIndexingRequestCount: TypedContractMethod<[], [bigint], "view">;

  kbIndexingRequestErrors: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  kbIndexingRequests: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  kbQueries: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint] & {
        cid: string;
        query: string;
        num_documents: bigint;
      }
    ],
    "view"
  >;

  kbQueryCallbackAddresses: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  kbQueryCallbackIds: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  kbQueryCount: TypedContractMethod<[], [bigint], "view">;

  latestAttestationOwner: TypedContractMethod<[], [string], "view">;

  latestPcr0HashOwner: TypedContractMethod<[], [string], "view">;

  markFunctionAsProcessed: TypedContractMethod<
    [functionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  markGroqPromptAsProcessed: TypedContractMethod<
    [promptId: BigNumberish],
    [void],
    "nonpayable"
  >;

  markKnowledgeBaseAsProcessed: TypedContractMethod<
    [kbIndexingRequestId: BigNumberish],
    [void],
    "nonpayable"
  >;

  markKnowledgeBaseQueryAsProcessed: TypedContractMethod<
    [kbQueryId: BigNumberish],
    [void],
    "nonpayable"
  >;

  markOpenAiPromptAsProcessed: TypedContractMethod<
    [promptId: BigNumberish],
    [void],
    "nonpayable"
  >;

  markPromptAsProcessed: TypedContractMethod<
    [promptId: BigNumberish],
    [void],
    "nonpayable"
  >;

  openAiConfigurations: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        bigint,
        string,
        bigint,
        bigint,
        string,
        bigint,
        string,
        bigint,
        bigint,
        string,
        string,
        string
      ] & {
        model: string;
        frequencyPenalty: bigint;
        logitBias: string;
        maxTokens: bigint;
        presencePenalty: bigint;
        responseFormat: string;
        seed: bigint;
        stop: string;
        temperature: bigint;
        topP: bigint;
        tools: string;
        toolChoice: string;
        user: string;
      }
    ],
    "view"
  >;

  pcr0Hashes: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  promptCallbackIds: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  promptType: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  promptTypes: TypedContractMethod<
    [],
    [
      [string, string, string] & {
        defaultType: string;
        openAi: string;
        groq: string;
      }
    ],
    "view"
  >;

  promptsCount: TypedContractMethod<[], [bigint], "view">;

  updateWhitelist: TypedContractMethod<
    [_addressToWhitelist: AddressLike, isWhitelisted: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addAttestation"
  ): TypedContractMethod<[attestation: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addFunctionResponse"
  ): TypedContractMethod<
    [
      functionId: BigNumberish,
      functionCallBackId: BigNumberish,
      response: string,
      errorMessage: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addGroqResponse"
  ): TypedContractMethod<
    [
      promptId: BigNumberish,
      promptCallBackId: BigNumberish,
      response: IOracle.GroqResponseStruct,
      errorMessage: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addKnowledgeBase"
  ): TypedContractMethod<[cid: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addKnowledgeBaseIndex"
  ): TypedContractMethod<
    [kbIndexingRequestId: BigNumberish, indexCid: string, error: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addKnowledgeBaseQueryResponse"
  ): TypedContractMethod<
    [
      kbQueryId: BigNumberish,
      kbQueryCallbackId: BigNumberish,
      documents: string[],
      errorMessage: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addOpenAiResponse"
  ): TypedContractMethod<
    [
      promptId: BigNumberish,
      promptCallBackId: BigNumberish,
      response: IOracle.OpenAiResponseStruct,
      errorMessage: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addPcr0Hash"
  ): TypedContractMethod<[pcr0Hash: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addResponse"
  ): TypedContractMethod<
    [
      promptId: BigNumberish,
      promptCallBackId: BigNumberish,
      response: string,
      errorMessage: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "attestations"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "callbackAddresses"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "createFunctionCall"
  ): TypedContractMethod<
    [
      functionCallbackId: BigNumberish,
      functionType: string,
      functionInput: string
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createGroqLlmCall"
  ): TypedContractMethod<
    [promptCallbackId: BigNumberish, config: IOracle.GroqRequestStruct],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createKnowledgeBaseQuery"
  ): TypedContractMethod<
    [
      kbQueryCallbackId: BigNumberish,
      cid: string,
      query: string,
      num_documents: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createLlmCall"
  ): TypedContractMethod<
    [promptCallbackId: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createOpenAiLlmCall"
  ): TypedContractMethod<
    [promptCallbackId: BigNumberish, config: IOracle.OpenAiRequestStruct],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "functionCallbackAddresses"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "functionCallbackIds"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "functionInputs"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "functionTypes"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "functionsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMessages"
  ): TypedContractMethod<
    [promptId: BigNumberish, promptCallBackId: BigNumberish],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMessagesAndRoles"
  ): TypedContractMethod<
    [promptId: BigNumberish, promptCallBackId: BigNumberish],
    [IOracle.MessageStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoles"
  ): TypedContractMethod<
    [promptId: BigNumberish, promptCallBackId: BigNumberish],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "groqConfigurations"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        bigint,
        string,
        bigint,
        bigint,
        string,
        bigint,
        string,
        bigint,
        bigint,
        string
      ] & {
        model: string;
        frequencyPenalty: bigint;
        logitBias: string;
        maxTokens: bigint;
        presencePenalty: bigint;
        responseFormat: string;
        seed: bigint;
        stop: string;
        temperature: bigint;
        topP: bigint;
        user: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isFunctionProcessed"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isKbIndexingRequestProcessed"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isKbQueryProcessed"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isPromptProcessed"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "kbIndexes"
  ): TypedContractMethod<[arg0: string], [string], "view">;
  getFunction(
    nameOrSignature: "kbIndexingRequestCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "kbIndexingRequestErrors"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "kbIndexingRequests"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "kbQueries"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint] & {
        cid: string;
        query: string;
        num_documents: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "kbQueryCallbackAddresses"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "kbQueryCallbackIds"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "kbQueryCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "latestAttestationOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "latestPcr0HashOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "markFunctionAsProcessed"
  ): TypedContractMethod<[functionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "markGroqPromptAsProcessed"
  ): TypedContractMethod<[promptId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "markKnowledgeBaseAsProcessed"
  ): TypedContractMethod<
    [kbIndexingRequestId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "markKnowledgeBaseQueryAsProcessed"
  ): TypedContractMethod<[kbQueryId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "markOpenAiPromptAsProcessed"
  ): TypedContractMethod<[promptId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "markPromptAsProcessed"
  ): TypedContractMethod<[promptId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "openAiConfigurations"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        bigint,
        string,
        bigint,
        bigint,
        string,
        bigint,
        string,
        bigint,
        bigint,
        string,
        string,
        string
      ] & {
        model: string;
        frequencyPenalty: bigint;
        logitBias: string;
        maxTokens: bigint;
        presencePenalty: bigint;
        responseFormat: string;
        seed: bigint;
        stop: string;
        temperature: bigint;
        topP: bigint;
        tools: string;
        toolChoice: string;
        user: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "pcr0Hashes"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "promptCallbackIds"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "promptType"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "promptTypes"
  ): TypedContractMethod<
    [],
    [
      [string, string, string] & {
        defaultType: string;
        openAi: string;
        groq: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "promptsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateWhitelist"
  ): TypedContractMethod<
    [_addressToWhitelist: AddressLike, isWhitelisted: boolean],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "FunctionAdded"
  ): TypedContractEvent<
    FunctionAddedEvent.InputTuple,
    FunctionAddedEvent.OutputTuple,
    FunctionAddedEvent.OutputObject
  >;
  getEvent(
    key: "KnowledgeBaseIndexRequestAdded"
  ): TypedContractEvent<
    KnowledgeBaseIndexRequestAddedEvent.InputTuple,
    KnowledgeBaseIndexRequestAddedEvent.OutputTuple,
    KnowledgeBaseIndexRequestAddedEvent.OutputObject
  >;
  getEvent(
    key: "KnowledgeBaseIndexed"
  ): TypedContractEvent<
    KnowledgeBaseIndexedEvent.InputTuple,
    KnowledgeBaseIndexedEvent.OutputTuple,
    KnowledgeBaseIndexedEvent.OutputObject
  >;
  getEvent(
    key: "PromptAdded"
  ): TypedContractEvent<
    PromptAddedEvent.InputTuple,
    PromptAddedEvent.OutputTuple,
    PromptAddedEvent.OutputObject
  >;
  getEvent(
    key: "knowledgeBaseQueryAdded"
  ): TypedContractEvent<
    knowledgeBaseQueryAddedEvent.InputTuple,
    knowledgeBaseQueryAddedEvent.OutputTuple,
    knowledgeBaseQueryAddedEvent.OutputObject
  >;

  filters: {
    "FunctionAdded(uint256,string,uint256,address)": TypedContractEvent<
      FunctionAddedEvent.InputTuple,
      FunctionAddedEvent.OutputTuple,
      FunctionAddedEvent.OutputObject
    >;
    FunctionAdded: TypedContractEvent<
      FunctionAddedEvent.InputTuple,
      FunctionAddedEvent.OutputTuple,
      FunctionAddedEvent.OutputObject
    >;

    "KnowledgeBaseIndexRequestAdded(uint256,address)": TypedContractEvent<
      KnowledgeBaseIndexRequestAddedEvent.InputTuple,
      KnowledgeBaseIndexRequestAddedEvent.OutputTuple,
      KnowledgeBaseIndexRequestAddedEvent.OutputObject
    >;
    KnowledgeBaseIndexRequestAdded: TypedContractEvent<
      KnowledgeBaseIndexRequestAddedEvent.InputTuple,
      KnowledgeBaseIndexRequestAddedEvent.OutputTuple,
      KnowledgeBaseIndexRequestAddedEvent.OutputObject
    >;

    "KnowledgeBaseIndexed(string,string)": TypedContractEvent<
      KnowledgeBaseIndexedEvent.InputTuple,
      KnowledgeBaseIndexedEvent.OutputTuple,
      KnowledgeBaseIndexedEvent.OutputObject
    >;
    KnowledgeBaseIndexed: TypedContractEvent<
      KnowledgeBaseIndexedEvent.InputTuple,
      KnowledgeBaseIndexedEvent.OutputTuple,
      KnowledgeBaseIndexedEvent.OutputObject
    >;

    "PromptAdded(uint256,uint256,address)": TypedContractEvent<
      PromptAddedEvent.InputTuple,
      PromptAddedEvent.OutputTuple,
      PromptAddedEvent.OutputObject
    >;
    PromptAdded: TypedContractEvent<
      PromptAddedEvent.InputTuple,
      PromptAddedEvent.OutputTuple,
      PromptAddedEvent.OutputObject
    >;

    "knowledgeBaseQueryAdded(uint256,address)": TypedContractEvent<
      knowledgeBaseQueryAddedEvent.InputTuple,
      knowledgeBaseQueryAddedEvent.OutputTuple,
      knowledgeBaseQueryAddedEvent.OutputObject
    >;
    knowledgeBaseQueryAdded: TypedContractEvent<
      knowledgeBaseQueryAddedEvent.InputTuple,
      knowledgeBaseQueryAddedEvent.OutputTuple,
      knowledgeBaseQueryAddedEvent.OutputObject
    >;
  };
}
