{
	"abi": [
		{
			"type": "receive",
			"stateMutability": "payable"
		},
		{
			"type": "function",
			"name": "BALLOT_TYPEHASH",
			"inputs": [],
			"outputs": [
				{
					"name": "",
					"type": "bytes32",
					"internalType": "bytes32"
				}
			],
			"stateMutability": "view"
		},
		{
			"type": "function",
			"name": "CLOCK_MODE",
			"inputs": [],
			"outputs": [
				{
					"name": "",
					"type": "string",
					"internalType": "string"
				}
			],
			"stateMutability": "view"
		},
		{
			"type": "function",
			"name": "COUNTING_MODE",
			"inputs": [],
			"outputs": [
				{
					"name": "",
					"type": "string",
					"internalType": "string"
				}
			],
			"stateMutability": "view"
		},
		{
			"type": "function",
			"name": "EXTENDED_BALLOT_TYPEHASH",
			"inputs": [],
			"outputs": [
				{
					"name": "",
					"type": "bytes32",
					"internalType": "bytes32"
				}
			],
			"stateMutability": "view"
		},
		{
			"type": "function",
			"name": "cancel",
			"inputs": [
				{
					"name": "targets",
					"type": "address[]",
					"internalType": "address[]"
				},
				{
					"name": "values",
					"type": "uint256[]",
					"internalType": "uint256[]"
				},
				{
					"name": "calldatas",
					"type": "bytes[]",
					"internalType": "bytes[]"
				},
				{
					"name": "descriptionHash",
					"type": "bytes32",
					"internalType": "bytes32"
				}
			],
			"outputs": [
				{
					"name": "",
					"type": "uint256",
					"internalType": "uint256"
				}
			],
			"stateMutability": "nonpayable"
		},
		{
			"type": "function",
			"name": "castVote",
			"inputs": [
				{
					"name": "proposalId",
					"type": "uint256",
					"internalType": "uint256"
				},
				{
					"name": "support",
					"type": "uint8",
					"internalType": "uint8"
				}
			],
			"outputs": [
				{
					"name": "",
					"type": "uint256",
					"internalType": "uint256"
				}
			],
			"stateMutability": "nonpayable"
		},
		{
			"type": "function",
			"name": "castVoteBySig",
			"inputs": [
				{
					"name": "proposalId",
					"type": "uint256",
					"internalType": "uint256"
				},
				{
					"name": "support",
					"type": "uint8",
					"internalType": "uint8"
				},
				{
					"name": "v",
					"type": "uint8",
					"internalType": "uint8"
				},
				{
					"name": "r",
					"type": "bytes32",
					"internalType": "bytes32"
				},
				{
					"name": "s",
					"type": "bytes32",
					"internalType": "bytes32"
				}
			],
			"outputs": [
				{
					"name": "",
					"type": "uint256",
					"internalType": "uint256"
				}
			],
			"stateMutability": "nonpayable"
		},
		{
			"type": "function",
			"name": "castVoteWithReason",
			"inputs": [
				{
					"name": "proposalId",
					"type": "uint256",
					"internalType": "uint256"
				},
				{
					"name": "support",
					"type": "uint8",
					"internalType": "uint8"
				},
				{
					"name": "reason",
					"type": "string",
					"internalType": "string"
				}
			],
			"outputs": [
				{
					"name": "",
					"type": "uint256",
					"internalType": "uint256"
				}
			],
			"stateMutability": "nonpayable"
		},
		{
			"type": "function",
			"name": "castVoteWithReasonAndParams",
			"inputs": [
				{
					"name": "proposalId",
					"type": "uint256",
					"internalType": "uint256"
				},
				{
					"name": "support",
					"type": "uint8",
					"internalType": "uint8"
				},
				{
					"name": "reason",
					"type": "string",
					"internalType": "string"
				},
				{
					"name": "params",
					"type": "bytes",
					"internalType": "bytes"
				}
			],
			"outputs": [
				{
					"name": "",
					"type": "uint256",
					"internalType": "uint256"
				}
			],
			"stateMutability": "nonpayable"
		},
		{
			"type": "function",
			"name": "castVoteWithReasonAndParamsBySig",
			"inputs": [
				{
					"name": "proposalId",
					"type": "uint256",
					"internalType": "uint256"
				},
				{
					"name": "support",
					"type": "uint8",
					"internalType": "uint8"
				},
				{
					"name": "reason",
					"type": "string",
					"internalType": "string"
				},
				{
					"name": "params",
					"type": "bytes",
					"internalType": "bytes"
				},
				{
					"name": "v",
					"type": "uint8",
					"internalType": "uint8"
				},
				{
					"name": "r",
					"type": "bytes32",
					"internalType": "bytes32"
				},
				{
					"name": "s",
					"type": "bytes32",
					"internalType": "bytes32"
				}
			],
			"outputs": [
				{
					"name": "",
					"type": "uint256",
					"internalType": "uint256"
				}
			],
			"stateMutability": "nonpayable"
		},
		{
			"type": "function",
			"name": "clock",
			"inputs": [],
			"outputs": [
				{
					"name": "",
					"type": "uint48",
					"internalType": "uint48"
				}
			],
			"stateMutability": "view"
		},
		{
			"type": "function",
			"name": "eip712Domain",
			"inputs": [],
			"outputs": [
				{
					"name": "fields",
					"type": "bytes1",
					"internalType": "bytes1"
				},
				{
					"name": "name",
					"type": "string",
					"internalType": "string"
				},
				{
					"name": "version",
					"type": "string",
					"internalType": "string"
				},
				{
					"name": "chainId",
					"type": "uint256",
					"internalType": "uint256"
				},
				{
					"name": "verifyingContract",
					"type": "address",
					"internalType": "address"
				},
				{
					"name": "salt",
					"type": "bytes32",
					"internalType": "bytes32"
				},
				{
					"name": "extensions",
					"type": "uint256[]",
					"internalType": "uint256[]"
				}
			],
			"stateMutability": "view"
		},
		{
			"type": "function",
			"name": "execute",
			"inputs": [
				{
					"name": "targets",
					"type": "address[]",
					"internalType": "address[]"
				},
				{
					"name": "values",
					"type": "uint256[]",
					"internalType": "uint256[]"
				},
				{
					"name": "calldatas",
					"type": "bytes[]",
					"internalType": "bytes[]"
				},
				{
					"name": "descriptionHash",
					"type": "bytes32",
					"internalType": "bytes32"
				}
			],
			"outputs": [
				{
					"name": "",
					"type": "uint256",
					"internalType": "uint256"
				}
			],
			"stateMutability": "payable"
		},
		{
			"type": "function",
			"name": "getVotes",
			"inputs": [
				{
					"name": "account",
					"type": "address",
					"internalType": "address"
				},
				{
					"name": "timepoint",
					"type": "uint256",
					"internalType": "uint256"
				}
			],
			"outputs": [
				{
					"name": "",
					"type": "uint256",
					"internalType": "uint256"
				}
			],
			"stateMutability": "view"
		},
		{
			"type": "function",
			"name": "getVotesWithParams",
			"inputs": [
				{
					"name": "account",
					"type": "address",
					"internalType": "address"
				},
				{
					"name": "timepoint",
					"type": "uint256",
					"internalType": "uint256"
				},
				{
					"name": "params",
					"type": "bytes",
					"internalType": "bytes"
				}
			],
			"outputs": [
				{
					"name": "",
					"type": "uint256",
					"internalType": "uint256"
				}
			],
			"stateMutability": "view"
		},
		{
			"type": "function",
			"name": "hasVoted",
			"inputs": [
				{
					"name": "proposalId",
					"type": "uint256",
					"internalType": "uint256"
				},
				{
					"name": "account",
					"type": "address",
					"internalType": "address"
				}
			],
			"outputs": [
				{
					"name": "",
					"type": "bool",
					"internalType": "bool"
				}
			],
			"stateMutability": "view"
		},
		{
			"type": "function",
			"name": "hashProposal",
			"inputs": [
				{
					"name": "targets",
					"type": "address[]",
					"internalType": "address[]"
				},
				{
					"name": "values",
					"type": "uint256[]",
					"internalType": "uint256[]"
				},
				{
					"name": "calldatas",
					"type": "bytes[]",
					"internalType": "bytes[]"
				},
				{
					"name": "descriptionHash",
					"type": "bytes32",
					"internalType": "bytes32"
				}
			],
			"outputs": [
				{
					"name": "",
					"type": "uint256",
					"internalType": "uint256"
				}
			],
			"stateMutability": "pure"
		},
		{
			"type": "function",
			"name": "name",
			"inputs": [],
			"outputs": [
				{
					"name": "",
					"type": "string",
					"internalType": "string"
				}
			],
			"stateMutability": "view"
		},
		{
			"type": "function",
			"name": "onERC1155BatchReceived",
			"inputs": [
				{
					"name": "",
					"type": "address",
					"internalType": "address"
				},
				{
					"name": "",
					"type": "address",
					"internalType": "address"
				},
				{
					"name": "",
					"type": "uint256[]",
					"internalType": "uint256[]"
				},
				{
					"name": "",
					"type": "uint256[]",
					"internalType": "uint256[]"
				},
				{
					"name": "",
					"type": "bytes",
					"internalType": "bytes"
				}
			],
			"outputs": [
				{
					"name": "",
					"type": "bytes4",
					"internalType": "bytes4"
				}
			],
			"stateMutability": "nonpayable"
		},
		{
			"type": "function",
			"name": "onERC1155Received",
			"inputs": [
				{
					"name": "",
					"type": "address",
					"internalType": "address"
				},
				{
					"name": "",
					"type": "address",
					"internalType": "address"
				},
				{
					"name": "",
					"type": "uint256",
					"internalType": "uint256"
				},
				{
					"name": "",
					"type": "uint256",
					"internalType": "uint256"
				},
				{
					"name": "",
					"type": "bytes",
					"internalType": "bytes"
				}
			],
			"outputs": [
				{
					"name": "",
					"type": "bytes4",
					"internalType": "bytes4"
				}
			],
			"stateMutability": "nonpayable"
		},
		{
			"type": "function",
			"name": "onERC721Received",
			"inputs": [
				{
					"name": "",
					"type": "address",
					"internalType": "address"
				},
				{
					"name": "",
					"type": "address",
					"internalType": "address"
				},
				{
					"name": "",
					"type": "uint256",
					"internalType": "uint256"
				},
				{
					"name": "",
					"type": "bytes",
					"internalType": "bytes"
				}
			],
			"outputs": [
				{
					"name": "",
					"type": "bytes4",
					"internalType": "bytes4"
				}
			],
			"stateMutability": "nonpayable"
		},
		{
			"type": "function",
			"name": "proposalDeadline",
			"inputs": [
				{
					"name": "proposalId",
					"type": "uint256",
					"internalType": "uint256"
				}
			],
			"outputs": [
				{
					"name": "",
					"type": "uint256",
					"internalType": "uint256"
				}
			],
			"stateMutability": "view"
		},
		{
			"type": "function",
			"name": "proposalProposer",
			"inputs": [
				{
					"name": "proposalId",
					"type": "uint256",
					"internalType": "uint256"
				}
			],
			"outputs": [
				{
					"name": "",
					"type": "address",
					"internalType": "address"
				}
			],
			"stateMutability": "view"
		},
		{
			"type": "function",
			"name": "proposalSnapshot",
			"inputs": [
				{
					"name": "proposalId",
					"type": "uint256",
					"internalType": "uint256"
				}
			],
			"outputs": [
				{
					"name": "",
					"type": "uint256",
					"internalType": "uint256"
				}
			],
			"stateMutability": "view"
		},
		{
			"type": "function",
			"name": "proposalThreshold",
			"inputs": [],
			"outputs": [
				{
					"name": "",
					"type": "uint256",
					"internalType": "uint256"
				}
			],
			"stateMutability": "view"
		},
		{
			"type": "function",
			"name": "propose",
			"inputs": [
				{
					"name": "targets",
					"type": "address[]",
					"internalType": "address[]"
				},
				{
					"name": "values",
					"type": "uint256[]",
					"internalType": "uint256[]"
				},
				{
					"name": "calldatas",
					"type": "bytes[]",
					"internalType": "bytes[]"
				},
				{
					"name": "description",
					"type": "string",
					"internalType": "string"
				}
			],
			"outputs": [
				{
					"name": "",
					"type": "uint256",
					"internalType": "uint256"
				}
			],
			"stateMutability": "nonpayable"
		},
		{
			"type": "function",
			"name": "quorum",
			"inputs": [
				{
					"name": "timepoint",
					"type": "uint256",
					"internalType": "uint256"
				}
			],
			"outputs": [
				{
					"name": "",
					"type": "uint256",
					"internalType": "uint256"
				}
			],
			"stateMutability": "view"
		},
		{
			"type": "function",
			"name": "relay",
			"inputs": [
				{
					"name": "target",
					"type": "address",
					"internalType": "address"
				},
				{
					"name": "value",
					"type": "uint256",
					"internalType": "uint256"
				},
				{
					"name": "data",
					"type": "bytes",
					"internalType": "bytes"
				}
			],
			"outputs": [],
			"stateMutability": "payable"
		},
		{
			"type": "function",
			"name": "state",
			"inputs": [
				{
					"name": "proposalId",
					"type": "uint256",
					"internalType": "uint256"
				}
			],
			"outputs": [
				{
					"name": "",
					"type": "uint8",
					"internalType": "enum IGovernor.ProposalState"
				}
			],
			"stateMutability": "view"
		},
		{
			"type": "function",
			"name": "supportsInterface",
			"inputs": [
				{
					"name": "interfaceId",
					"type": "bytes4",
					"internalType": "bytes4"
				}
			],
			"outputs": [
				{
					"name": "",
					"type": "bool",
					"internalType": "bool"
				}
			],
			"stateMutability": "view"
		},
		{
			"type": "function",
			"name": "version",
			"inputs": [],
			"outputs": [
				{
					"name": "",
					"type": "string",
					"internalType": "string"
				}
			],
			"stateMutability": "view"
		},
		{
			"type": "function",
			"name": "votingDelay",
			"inputs": [],
			"outputs": [
				{
					"name": "",
					"type": "uint256",
					"internalType": "uint256"
				}
			],
			"stateMutability": "view"
		},
		{
			"type": "function",
			"name": "votingPeriod",
			"inputs": [],
			"outputs": [
				{
					"name": "",
					"type": "uint256",
					"internalType": "uint256"
				}
			],
			"stateMutability": "view"
		},
		{
			"type": "event",
			"name": "EIP712DomainChanged",
			"inputs": [],
			"anonymous": false
		},
		{
			"type": "event",
			"name": "ProposalCanceled",
			"inputs": [
				{
					"name": "proposalId",
					"type": "uint256",
					"indexed": false,
					"internalType": "uint256"
				}
			],
			"anonymous": false
		},
		{
			"type": "event",
			"name": "ProposalCreated",
			"inputs": [
				{
					"name": "proposalId",
					"type": "uint256",
					"indexed": false,
					"internalType": "uint256"
				},
				{
					"name": "proposer",
					"type": "address",
					"indexed": false,
					"internalType": "address"
				},
				{
					"name": "targets",
					"type": "address[]",
					"indexed": false,
					"internalType": "address[]"
				},
				{
					"name": "values",
					"type": "uint256[]",
					"indexed": false,
					"internalType": "uint256[]"
				},
				{
					"name": "signatures",
					"type": "string[]",
					"indexed": false,
					"internalType": "string[]"
				},
				{
					"name": "calldatas",
					"type": "bytes[]",
					"indexed": false,
					"internalType": "bytes[]"
				},
				{
					"name": "voteStart",
					"type": "uint256",
					"indexed": false,
					"internalType": "uint256"
				},
				{
					"name": "voteEnd",
					"type": "uint256",
					"indexed": false,
					"internalType": "uint256"
				},
				{
					"name": "description",
					"type": "string",
					"indexed": false,
					"internalType": "string"
				}
			],
			"anonymous": false
		},
		{
			"type": "event",
			"name": "ProposalExecuted",
			"inputs": [
				{
					"name": "proposalId",
					"type": "uint256",
					"indexed": false,
					"internalType": "uint256"
				}
			],
			"anonymous": false
		},
		{
			"type": "event",
			"name": "VoteCast",
			"inputs": [
				{
					"name": "voter",
					"type": "address",
					"indexed": true,
					"internalType": "address"
				},
				{
					"name": "proposalId",
					"type": "uint256",
					"indexed": false,
					"internalType": "uint256"
				},
				{
					"name": "support",
					"type": "uint8",
					"indexed": false,
					"internalType": "uint8"
				},
				{
					"name": "weight",
					"type": "uint256",
					"indexed": false,
					"internalType": "uint256"
				},
				{
					"name": "reason",
					"type": "string",
					"indexed": false,
					"internalType": "string"
				}
			],
			"anonymous": false
		},
		{
			"type": "event",
			"name": "VoteCastWithParams",
			"inputs": [
				{
					"name": "voter",
					"type": "address",
					"indexed": true,
					"internalType": "address"
				},
				{
					"name": "proposalId",
					"type": "uint256",
					"indexed": false,
					"internalType": "uint256"
				},
				{
					"name": "support",
					"type": "uint8",
					"indexed": false,
					"internalType": "uint8"
				},
				{
					"name": "weight",
					"type": "uint256",
					"indexed": false,
					"internalType": "uint256"
				},
				{
					"name": "reason",
					"type": "string",
					"indexed": false,
					"internalType": "string"
				},
				{
					"name": "params",
					"type": "bytes",
					"indexed": false,
					"internalType": "bytes"
				}
			],
			"anonymous": false
		},
		{
			"type": "error",
			"name": "Empty",
			"inputs": []
		},
		{
			"type": "error",
			"name": "InvalidShortString",
			"inputs": []
		},
		{
			"type": "error",
			"name": "StringTooLong",
			"inputs": [
				{
					"name": "str",
					"type": "string",
					"internalType": "string"
				}
			]
		}
	],
	"bytecode": {
		"object": "0x",
		"sourceMap": "",
		"linkReferences": {}
	},
	"deployedBytecode": {
		"object": "0x",
		"sourceMap": "",
		"linkReferences": {}
	},
	"methodIdentifiers": {
		"BALLOT_TYPEHASH()": "deaaa7cc",
		"CLOCK_MODE()": "4bf5d7e9",
		"COUNTING_MODE()": "dd4e2ba5",
		"EXTENDED_BALLOT_TYPEHASH()": "2fe3e261",
		"cancel(address[],uint256[],bytes[],bytes32)": "452115d6",
		"castVote(uint256,uint8)": "56781388",
		"castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)": "3bccf4fd",
		"castVoteWithReason(uint256,uint8,string)": "7b3c71d3",
		"castVoteWithReasonAndParams(uint256,uint8,string,bytes)": "5f398a14",
		"castVoteWithReasonAndParamsBySig(uint256,uint8,string,bytes,uint8,bytes32,bytes32)": "03420181",
		"clock()": "91ddadf4",
		"eip712Domain()": "84b0196e",
		"execute(address[],uint256[],bytes[],bytes32)": "2656227d",
		"getVotes(address,uint256)": "eb9019d4",
		"getVotesWithParams(address,uint256,bytes)": "9a802a6d",
		"hasVoted(uint256,address)": "43859632",
		"hashProposal(address[],uint256[],bytes[],bytes32)": "c59057e4",
		"name()": "06fdde03",
		"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": "bc197c81",
		"onERC1155Received(address,address,uint256,uint256,bytes)": "f23a6e61",
		"onERC721Received(address,address,uint256,bytes)": "150b7a02",
		"proposalDeadline(uint256)": "c01f9e37",
		"proposalProposer(uint256)": "143489d0",
		"proposalSnapshot(uint256)": "2d63f693",
		"proposalThreshold()": "b58131b0",
		"propose(address[],uint256[],bytes[],string)": "7d5e81e2",
		"quorum(uint256)": "f8ce560a",
		"relay(address,uint256,bytes)": "c28bc2fa",
		"state(uint256)": "3e4f49e6",
		"supportsInterface(bytes4)": "01ffc9a7",
		"version()": "54fd4d50",
		"votingDelay()": "3932abb1",
		"votingPeriod()": "02a251a3"
	},
	"rawMetadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Empty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voteStart\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"voteEnd\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"VoteCastWithParams\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BALLOT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CLOCK_MODE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COUNTING_MODE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXTENDED_BALLOT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"descriptionHash\",\"type\":\"bytes32\"}],\"name\":\"cancel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"}],\"name\":\"castVote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"castVoteBySig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"castVoteWithReason\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"castVoteWithReasonAndParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"castVoteWithReasonAndParamsBySig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clock\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"descriptionHash\",\"type\":\"bytes32\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"getVotesWithParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"descriptionHash\",\"type\":\"bytes32\"}],\"name\":\"hashProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"proposalDeadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"proposalProposer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"proposalSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"quorum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"relay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum IGovernor.ProposalState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Core of the governance system, designed to be extended though various modules. This contract is abstract and requires several functions to be implemented in various modules: - A counting module must implement {quorum}, {_quorumReached}, {_voteSucceeded} and {_countVote} - A voting module must implement {_getVotes} - Additionally, {votingPeriod} must also be implemented _Available since v4.3._\",\"errors\":{\"Empty()\":[{\"details\":\"An operation (e.g. {front}) couldn't be completed due to the queue being empty.\"}]},\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"ProposalCanceled(uint256)\":{\"details\":\"Emitted when a proposal is canceled.\"},\"ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string)\":{\"details\":\"Emitted when a proposal is created.\"},\"ProposalExecuted(uint256)\":{\"details\":\"Emitted when a proposal is executed.\"},\"VoteCast(address,uint256,uint8,uint256,string)\":{\"details\":\"Emitted when a vote is cast without params. Note: `support` values should be seen as buckets. Their interpretation depends on the voting module used.\"},\"VoteCastWithParams(address,uint256,uint8,uint256,string,bytes)\":{\"details\":\"Emitted when a vote is cast with params. Note: `support` values should be seen as buckets. Their interpretation depends on the voting module used. `params` are additional encoded parameters. Their interpepretation also depends on the voting module used.\"}},\"kind\":\"dev\",\"methods\":{\"CLOCK_MODE()\":{\"details\":\"See EIP-6372.\"},\"COUNTING_MODE()\":{\"details\":\"A description of the possible `support` values for {castVote} and the way these votes are counted, meant to be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of key-value pairs that each describe one aspect, for example `support=bravo&quorum=for,abstain`. There are 2 standard keys: `support` and `quorum`. - `support=bravo` refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in `GovernorBravo`. - `quorum=bravo` means that only For votes are counted towards quorum. - `quorum=for,abstain` means that both For and Abstain votes are counted towards quorum. If a counting module makes use of encoded `params`, it should  include this under a `params` key with a unique name that describes the behavior. For example: - `params=fractional` might refer to a scheme where votes are divided fractionally between for/against/abstain. - `params=erc721` might refer to a scheme where specific NFTs are delegated to vote. NOTE: The string can be decoded by the standard https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[`URLSearchParams`] JavaScript class.\"},\"cancel(address[],uint256[],bytes[],bytes32)\":{\"details\":\"See {IGovernor-cancel}.\"},\"castVote(uint256,uint8)\":{\"details\":\"See {IGovernor-castVote}.\"},\"castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)\":{\"details\":\"See {IGovernor-castVoteBySig}.\"},\"castVoteWithReason(uint256,uint8,string)\":{\"details\":\"See {IGovernor-castVoteWithReason}.\"},\"castVoteWithReasonAndParams(uint256,uint8,string,bytes)\":{\"details\":\"See {IGovernor-castVoteWithReasonAndParams}.\"},\"castVoteWithReasonAndParamsBySig(uint256,uint8,string,bytes,uint8,bytes32,bytes32)\":{\"details\":\"See {IGovernor-castVoteWithReasonAndParamsBySig}.\"},\"clock()\":{\"details\":\"See {IERC6372}\"},\"constructor\":{\"details\":\"Sets the value for {name} and {version}\"},\"eip712Domain()\":{\"details\":\"See {EIP-5267}. _Available since v4.9._\"},\"execute(address[],uint256[],bytes[],bytes32)\":{\"details\":\"See {IGovernor-execute}.\"},\"getVotes(address,uint256)\":{\"details\":\"See {IGovernor-getVotes}.\"},\"getVotesWithParams(address,uint256,bytes)\":{\"details\":\"See {IGovernor-getVotesWithParams}.\"},\"hasVoted(uint256,address)\":{\"details\":\"Returns whether `account` has cast a vote on `proposalId`.\"},\"hashProposal(address[],uint256[],bytes[],bytes32)\":{\"details\":\"See {IGovernor-hashProposal}. The proposal id is produced by hashing the ABI encoded `targets` array, the `values` array, the `calldatas` array and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in advance, before the proposal is submitted. Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the same proposal (with same operation and same description) will have the same id if submitted on multiple governors across multiple networks. This also means that in order to execute the same operation twice (on the same governor) the proposer will have to change the description in order to avoid proposal id conflicts.\"},\"name()\":{\"details\":\"See {IGovernor-name}.\"},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155Receiver-onERC1155BatchReceived}.\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155Receiver-onERC1155Received}.\"},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}.\"},\"proposalDeadline(uint256)\":{\"details\":\"See {IGovernor-proposalDeadline}.\"},\"proposalProposer(uint256)\":{\"details\":\"Returns the account that created a given proposal.\"},\"proposalSnapshot(uint256)\":{\"details\":\"See {IGovernor-proposalSnapshot}.\"},\"proposalThreshold()\":{\"details\":\"Part of the Governor Bravo's interface: _\\\"The number of votes required in order for a voter to become a proposer\\\"_.\"},\"propose(address[],uint256[],bytes[],string)\":{\"details\":\"See {IGovernor-propose}. This function has opt-in frontrunning protection, described in {_isValidDescriptionForProposer}.\"},\"quorum(uint256)\":{\"details\":\"Minimum number of cast voted required for a proposal to be successful. NOTE: The `timepoint` parameter corresponds to the snapshot used for counting vote. This allows to scale the quorum depending on values such as the totalSupply of a token at this timepoint (see {ERC20Votes}).\"},\"relay(address,uint256,bytes)\":{\"details\":\"Relays a transaction or function call to an arbitrary target. In cases where the governance executor is some contract other than the governor itself, like when using a timelock, this function can be invoked in a governance proposal to recover tokens or Ether that was sent to the governor contract by mistake. Note that if the executor is simply the governor itself, use of `relay` is redundant.\"},\"state(uint256)\":{\"details\":\"See {IGovernor-state}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"version()\":{\"details\":\"See {IGovernor-version}.\"},\"votingDelay()\":{\"details\":\"Delay, between the proposal is created and the vote starts. The unit this duration is expressed in depends on the clock (see EIP-6372) this contract uses. This can be increased to leave time for users to buy voting power, or delegate it, before the voting of a proposal starts.\"},\"votingPeriod()\":{\"details\":\"Delay between the vote start and vote end. The unit this duration is expressed in depends on the clock (see EIP-6372) this contract uses. NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting duration compared to the voting delay.\"}},\"stateVariables\":{\"_proposals\":{\"custom:oz-retyped-from\":\"mapping(uint256 => Governor.ProposalCore)\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"CLOCK_MODE()\":{\"notice\":\"module:core\"},\"COUNTING_MODE()\":{\"notice\":\"module:voting\"},\"clock()\":{\"notice\":\"module:core\"},\"hasVoted(uint256,address)\":{\"notice\":\"module:voting\"},\"quorum(uint256)\":{\"notice\":\"module:user-config\"},\"votingDelay()\":{\"notice\":\"module:user-config\"},\"votingPeriod()\":{\"notice\":\"module:user-config\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/governance/Governor.sol\":\"Governor\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=lib/openzeppelin-contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/governance/Governor.sol\":{\"keccak256\":\"0x471e9425ad9a182c6abdc02bc408ca788b935c31c3bfa3e80b7cb556448ecb8f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://60fba870e97eb84b145fff2df01da8dad8e26e2d540c4f7ae22615e8d4511be4\",\"dweb:/ipfs/QmbJegvJ16YAyiVP3J8oFun4zsoPfjj1KEJ6ZtWgJYffyw\"]},\"lib/openzeppelin-contracts/contracts/governance/IGovernor.sol\":{\"keccak256\":\"0x2bca164e61152f22bd4be7f444d40a46f7b13aa3b7b7fd6b45aa2d869e72f6d7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5ed8cf61b5ec618f839ca35fd2d614aa83f252930dcc1c9fdf6259d6e381644d\",\"dweb:/ipfs/QmSjHjCsr9aSudtFJWZ1Pj76FVzUEEpwmFBGnxoRftVN7g\"]},\"lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol\":{\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7b652499d098e88d8d878374616bb58434301061cae2253298b3f374044e0ddb\",\"dweb:/ipfs/QmbhAzctqo5jrSKU6idHdVyqfmzCcDbNUPvmx4GiXxfA6q\"]},\"lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol\":{\"keccak256\":\"0xac6c2efc64baccbde4904ae18ed45139c9aa8cff96d6888344d1e4d2eb8b659f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e416a280c610b6b7a5f158e4a41aacfaec01ef14d5d1de13b46be9e090265fc\",\"dweb:/ipfs/QmYZP2KrdyccBbhLZT42auhvBTMkwiwUS3V6HWb42rbwbG\"]},\"lib/openzeppelin-contracts/contracts/interfaces/IERC6372.sol\":{\"keccak256\":\"0xcaea9aeda3816ba872358c828f4f01455c22ae48ced49c4c7d72bd74176c09b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://16ff22d8df5aee94510ee43d361b6147caef164941a684cedcb75be44f351fe6\",\"dweb:/ipfs/QmaCCwMdHVdPApuEJHLZapSJyA7mp5dAugpma3VUzWGd8E\"]},\"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0e28648f994abf1d6bc345644a361cc0b7efa544f8bc0c8ec26011fed85a91ec\",\"dweb:/ipfs/QmVVE7AiRjKaQYYji7TkjmTeVzGpNmms5eoxqTCfvvpj6D\"]},\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e75cf83beb757b8855791088546b8337e9d4684e169400c20d44a515353b708\",\"dweb:/ipfs/QmYvPafLfoquiDMEj7CKHtvbgHu7TJNPSVPSCjrtjV8HjV\"]},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2455248c8ddd9cc6a7af76a13973cddf222072427e7b0e2a7d1aff345145e931\",\"dweb:/ipfs/QmfYjnjRbWqYpuxurqveE6HtzsY1Xx323J428AKQgtBJZm\"]},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a367861093b74443b137564d3f3c472f70bcf114739e62059c939f25e315706c\",\"dweb:/ipfs/Qmd7JMpcxD9RuQjK3uM3EzJUgSqdN8vzp8eytEiuwxQJ6h\"]},\"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol\":{\"keccak256\":\"0xc0e310c163edf15db45d4ff938113ab357f94fa86e61ea8e790853c4d2e13256\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://04db5bc05dcb05ba1f6ca2dfbead17adc8a2e2f911aa80b05e7a36d9eaf96516\",\"dweb:/ipfs/QmVkfHZbXVBUPsTopueCn3qGJX8aEjahFF3Fn4NcygLNm5\"]},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e26daf81e2252dc1fe1ce0e4b55c2eb7c6d1ee84ae6558d1a9554432ea1d32da\",\"dweb:/ipfs/Qmb1UANWiWq5pCKbmHSu772hd4nt374dVaghGmwSVNuk8Q\"]},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b81d9ff6559ea5c47fc573e17ece6d9ba5d6839e213e6ebc3b4c5c8fe4199d7f\",\"dweb:/ipfs/QmPCW1bFisUzJkyjroY3yipwfism9RRCigCcK1hbXtVM8n\"]},\"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8b93a1e39a4a19eba1600b92c96f435442db88cac91e315c8291547a2a7bcfe2\",\"dweb:/ipfs/QmTm34KVe6uZBZwq8dZDNWwPcm24qBJdxqL3rPxBJ4LrMv\"]},\"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol\":{\"keccak256\":\"0x8432884527a7ad91e6eed1cfc5a0811ae2073e5bca107bd0ca442e9236b03dbd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e3aa0eadab7aafcf91a95684765f778f64386f0368de88522ce873c21385278a\",\"dweb:/ipfs/QmPfaVAqWgH1QsT3dHVuL6jwMZbVKdoP8w1PvpiPT2FPWd\"]},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d\",\"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43\"]},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f\",\"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy\"]},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cc8841b3cd48ad125e2f46323c8bad3aa0e88e399ec62acb9e57efa7e7c8058c\",\"dweb:/ipfs/QmSqE4mXHA2BXW58deDbXE8MTcsL5JSKNDbm23sVQxRLPS\"]},\"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol\":{\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://495145362c7ff1c9ca88c58bbbbcb412e3c2004406647412394486552ff6c278\",\"dweb:/ipfs/QmNNCeng6d5eRPDn6tkWSQhjE39XWfQEfjA63rRwHmr1iH\"]},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c50fcc459e49a9858b6d8ad5f911295cb7c9ab57567845a250bf0153f84a95c7\",\"dweb:/ipfs/QmcEW85JRzvDkQggxiBBLVAasXWdkhEysqypj9EaB6H2g6\"]},\"lib/openzeppelin-contracts/contracts/utils/structs/DoubleEndedQueue.sol\":{\"keccak256\":\"0xb5fbb623dec53bb9b6c1b738b4ab6540a04ac5dc2ac94d95fa3ebfd22898559c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4a6e7f26c0c688a987c19c8b0997c7e47c33f7717b6293a487afe8429d95b8e7\",\"dweb:/ipfs/QmVrmXcQ7KLM5fw4PWeJ8j4nnmfHkjpFPariMMh5UvsEVD\"]}},\"version\":1}",
	"metadata": {
		"compiler": {
			"version": "0.8.26+commit.8a97fa7a"
		},
		"language": "Solidity",
		"output": {
			"abi": [
				{
					"inputs": [],
					"type": "error",
					"name": "Empty"
				},
				{
					"inputs": [],
					"type": "error",
					"name": "InvalidShortString"
				},
				{
					"inputs": [
						{
							"internalType": "string",
							"name": "str",
							"type": "string"
						}
					],
					"type": "error",
					"name": "StringTooLong"
				},
				{
					"inputs": [],
					"type": "event",
					"name": "EIP712DomainChanged",
					"anonymous": false
				},
				{
					"inputs": [
						{
							"internalType": "uint256",
							"name": "proposalId",
							"type": "uint256",
							"indexed": false
						}
					],
					"type": "event",
					"name": "ProposalCanceled",
					"anonymous": false
				},
				{
					"inputs": [
						{
							"internalType": "uint256",
							"name": "proposalId",
							"type": "uint256",
							"indexed": false
						},
						{
							"internalType": "address",
							"name": "proposer",
							"type": "address",
							"indexed": false
						},
						{
							"internalType": "address[]",
							"name": "targets",
							"type": "address[]",
							"indexed": false
						},
						{
							"internalType": "uint256[]",
							"name": "values",
							"type": "uint256[]",
							"indexed": false
						},
						{
							"internalType": "string[]",
							"name": "signatures",
							"type": "string[]",
							"indexed": false
						},
						{
							"internalType": "bytes[]",
							"name": "calldatas",
							"type": "bytes[]",
							"indexed": false
						},
						{
							"internalType": "uint256",
							"name": "voteStart",
							"type": "uint256",
							"indexed": false
						},
						{
							"internalType": "uint256",
							"name": "voteEnd",
							"type": "uint256",
							"indexed": false
						},
						{
							"internalType": "string",
							"name": "description",
							"type": "string",
							"indexed": false
						}
					],
					"type": "event",
					"name": "ProposalCreated",
					"anonymous": false
				},
				{
					"inputs": [
						{
							"internalType": "uint256",
							"name": "proposalId",
							"type": "uint256",
							"indexed": false
						}
					],
					"type": "event",
					"name": "ProposalExecuted",
					"anonymous": false
				},
				{
					"inputs": [
						{
							"internalType": "address",
							"name": "voter",
							"type": "address",
							"indexed": true
						},
						{
							"internalType": "uint256",
							"name": "proposalId",
							"type": "uint256",
							"indexed": false
						},
						{
							"internalType": "uint8",
							"name": "support",
							"type": "uint8",
							"indexed": false
						},
						{
							"internalType": "uint256",
							"name": "weight",
							"type": "uint256",
							"indexed": false
						},
						{
							"internalType": "string",
							"name": "reason",
							"type": "string",
							"indexed": false
						}
					],
					"type": "event",
					"name": "VoteCast",
					"anonymous": false
				},
				{
					"inputs": [
						{
							"internalType": "address",
							"name": "voter",
							"type": "address",
							"indexed": true
						},
						{
							"internalType": "uint256",
							"name": "proposalId",
							"type": "uint256",
							"indexed": false
						},
						{
							"internalType": "uint8",
							"name": "support",
							"type": "uint8",
							"indexed": false
						},
						{
							"internalType": "uint256",
							"name": "weight",
							"type": "uint256",
							"indexed": false
						},
						{
							"internalType": "string",
							"name": "reason",
							"type": "string",
							"indexed": false
						},
						{
							"internalType": "bytes",
							"name": "params",
							"type": "bytes",
							"indexed": false
						}
					],
					"type": "event",
					"name": "VoteCastWithParams",
					"anonymous": false
				},
				{
					"inputs": [],
					"stateMutability": "view",
					"type": "function",
					"name": "BALLOT_TYPEHASH",
					"outputs": [
						{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}
					]
				},
				{
					"inputs": [],
					"stateMutability": "view",
					"type": "function",
					"name": "CLOCK_MODE",
					"outputs": [
						{
							"internalType": "string",
							"name": "",
							"type": "string"
						}
					]
				},
				{
					"inputs": [],
					"stateMutability": "view",
					"type": "function",
					"name": "COUNTING_MODE",
					"outputs": [
						{
							"internalType": "string",
							"name": "",
							"type": "string"
						}
					]
				},
				{
					"inputs": [],
					"stateMutability": "view",
					"type": "function",
					"name": "EXTENDED_BALLOT_TYPEHASH",
					"outputs": [
						{
							"internalType": "bytes32",
							"name": "",
							"type": "bytes32"
						}
					]
				},
				{
					"inputs": [
						{
							"internalType": "address[]",
							"name": "targets",
							"type": "address[]"
						},
						{
							"internalType": "uint256[]",
							"name": "values",
							"type": "uint256[]"
						},
						{
							"internalType": "bytes[]",
							"name": "calldatas",
							"type": "bytes[]"
						},
						{
							"internalType": "bytes32",
							"name": "descriptionHash",
							"type": "bytes32"
						}
					],
					"stateMutability": "nonpayable",
					"type": "function",
					"name": "cancel",
					"outputs": [
						{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}
					]
				},
				{
					"inputs": [
						{
							"internalType": "uint256",
							"name": "proposalId",
							"type": "uint256"
						},
						{
							"internalType": "uint8",
							"name": "support",
							"type": "uint8"
						}
					],
					"stateMutability": "nonpayable",
					"type": "function",
					"name": "castVote",
					"outputs": [
						{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}
					]
				},
				{
					"inputs": [
						{
							"internalType": "uint256",
							"name": "proposalId",
							"type": "uint256"
						},
						{
							"internalType": "uint8",
							"name": "support",
							"type": "uint8"
						},
						{
							"internalType": "uint8",
							"name": "v",
							"type": "uint8"
						},
						{
							"internalType": "bytes32",
							"name": "r",
							"type": "bytes32"
						},
						{
							"internalType": "bytes32",
							"name": "s",
							"type": "bytes32"
						}
					],
					"stateMutability": "nonpayable",
					"type": "function",
					"name": "castVoteBySig",
					"outputs": [
						{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}
					]
				},
				{
					"inputs": [
						{
							"internalType": "uint256",
							"name": "proposalId",
							"type": "uint256"
						},
						{
							"internalType": "uint8",
							"name": "support",
							"type": "uint8"
						},
						{
							"internalType": "string",
							"name": "reason",
							"type": "string"
						}
					],
					"stateMutability": "nonpayable",
					"type": "function",
					"name": "castVoteWithReason",
					"outputs": [
						{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}
					]
				},
				{
					"inputs": [
						{
							"internalType": "uint256",
							"name": "proposalId",
							"type": "uint256"
						},
						{
							"internalType": "uint8",
							"name": "support",
							"type": "uint8"
						},
						{
							"internalType": "string",
							"name": "reason",
							"type": "string"
						},
						{
							"internalType": "bytes",
							"name": "params",
							"type": "bytes"
						}
					],
					"stateMutability": "nonpayable",
					"type": "function",
					"name": "castVoteWithReasonAndParams",
					"outputs": [
						{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}
					]
				},
				{
					"inputs": [
						{
							"internalType": "uint256",
							"name": "proposalId",
							"type": "uint256"
						},
						{
							"internalType": "uint8",
							"name": "support",
							"type": "uint8"
						},
						{
							"internalType": "string",
							"name": "reason",
							"type": "string"
						},
						{
							"internalType": "bytes",
							"name": "params",
							"type": "bytes"
						},
						{
							"internalType": "uint8",
							"name": "v",
							"type": "uint8"
						},
						{
							"internalType": "bytes32",
							"name": "r",
							"type": "bytes32"
						},
						{
							"internalType": "bytes32",
							"name": "s",
							"type": "bytes32"
						}
					],
					"stateMutability": "nonpayable",
					"type": "function",
					"name": "castVoteWithReasonAndParamsBySig",
					"outputs": [
						{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}
					]
				},
				{
					"inputs": [],
					"stateMutability": "view",
					"type": "function",
					"name": "clock",
					"outputs": [
						{
							"internalType": "uint48",
							"name": "",
							"type": "uint48"
						}
					]
				},
				{
					"inputs": [],
					"stateMutability": "view",
					"type": "function",
					"name": "eip712Domain",
					"outputs": [
						{
							"internalType": "bytes1",
							"name": "fields",
							"type": "bytes1"
						},
						{
							"internalType": "string",
							"name": "name",
							"type": "string"
						},
						{
							"internalType": "string",
							"name": "version",
							"type": "string"
						},
						{
							"internalType": "uint256",
							"name": "chainId",
							"type": "uint256"
						},
						{
							"internalType": "address",
							"name": "verifyingContract",
							"type": "address"
						},
						{
							"internalType": "bytes32",
							"name": "salt",
							"type": "bytes32"
						},
						{
							"internalType": "uint256[]",
							"name": "extensions",
							"type": "uint256[]"
						}
					]
				},
				{
					"inputs": [
						{
							"internalType": "address[]",
							"name": "targets",
							"type": "address[]"
						},
						{
							"internalType": "uint256[]",
							"name": "values",
							"type": "uint256[]"
						},
						{
							"internalType": "bytes[]",
							"name": "calldatas",
							"type": "bytes[]"
						},
						{
							"internalType": "bytes32",
							"name": "descriptionHash",
							"type": "bytes32"
						}
					],
					"stateMutability": "payable",
					"type": "function",
					"name": "execute",
					"outputs": [
						{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}
					]
				},
				{
					"inputs": [
						{
							"internalType": "address",
							"name": "account",
							"type": "address"
						},
						{
							"internalType": "uint256",
							"name": "timepoint",
							"type": "uint256"
						}
					],
					"stateMutability": "view",
					"type": "function",
					"name": "getVotes",
					"outputs": [
						{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}
					]
				},
				{
					"inputs": [
						{
							"internalType": "address",
							"name": "account",
							"type": "address"
						},
						{
							"internalType": "uint256",
							"name": "timepoint",
							"type": "uint256"
						},
						{
							"internalType": "bytes",
							"name": "params",
							"type": "bytes"
						}
					],
					"stateMutability": "view",
					"type": "function",
					"name": "getVotesWithParams",
					"outputs": [
						{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}
					]
				},
				{
					"inputs": [
						{
							"internalType": "uint256",
							"name": "proposalId",
							"type": "uint256"
						},
						{
							"internalType": "address",
							"name": "account",
							"type": "address"
						}
					],
					"stateMutability": "view",
					"type": "function",
					"name": "hasVoted",
					"outputs": [
						{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}
					]
				},
				{
					"inputs": [
						{
							"internalType": "address[]",
							"name": "targets",
							"type": "address[]"
						},
						{
							"internalType": "uint256[]",
							"name": "values",
							"type": "uint256[]"
						},
						{
							"internalType": "bytes[]",
							"name": "calldatas",
							"type": "bytes[]"
						},
						{
							"internalType": "bytes32",
							"name": "descriptionHash",
							"type": "bytes32"
						}
					],
					"stateMutability": "pure",
					"type": "function",
					"name": "hashProposal",
					"outputs": [
						{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}
					]
				},
				{
					"inputs": [],
					"stateMutability": "view",
					"type": "function",
					"name": "name",
					"outputs": [
						{
							"internalType": "string",
							"name": "",
							"type": "string"
						}
					]
				},
				{
					"inputs": [
						{
							"internalType": "address",
							"name": "",
							"type": "address"
						},
						{
							"internalType": "address",
							"name": "",
							"type": "address"
						},
						{
							"internalType": "uint256[]",
							"name": "",
							"type": "uint256[]"
						},
						{
							"internalType": "uint256[]",
							"name": "",
							"type": "uint256[]"
						},
						{
							"internalType": "bytes",
							"name": "",
							"type": "bytes"
						}
					],
					"stateMutability": "nonpayable",
					"type": "function",
					"name": "onERC1155BatchReceived",
					"outputs": [
						{
							"internalType": "bytes4",
							"name": "",
							"type": "bytes4"
						}
					]
				},
				{
					"inputs": [
						{
							"internalType": "address",
							"name": "",
							"type": "address"
						},
						{
							"internalType": "address",
							"name": "",
							"type": "address"
						},
						{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						},
						{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						},
						{
							"internalType": "bytes",
							"name": "",
							"type": "bytes"
						}
					],
					"stateMutability": "nonpayable",
					"type": "function",
					"name": "onERC1155Received",
					"outputs": [
						{
							"internalType": "bytes4",
							"name": "",
							"type": "bytes4"
						}
					]
				},
				{
					"inputs": [
						{
							"internalType": "address",
							"name": "",
							"type": "address"
						},
						{
							"internalType": "address",
							"name": "",
							"type": "address"
						},
						{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						},
						{
							"internalType": "bytes",
							"name": "",
							"type": "bytes"
						}
					],
					"stateMutability": "nonpayable",
					"type": "function",
					"name": "onERC721Received",
					"outputs": [
						{
							"internalType": "bytes4",
							"name": "",
							"type": "bytes4"
						}
					]
				},
				{
					"inputs": [
						{
							"internalType": "uint256",
							"name": "proposalId",
							"type": "uint256"
						}
					],
					"stateMutability": "view",
					"type": "function",
					"name": "proposalDeadline",
					"outputs": [
						{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}
					]
				},
				{
					"inputs": [
						{
							"internalType": "uint256",
							"name": "proposalId",
							"type": "uint256"
						}
					],
					"stateMutability": "view",
					"type": "function",
					"name": "proposalProposer",
					"outputs": [
						{
							"internalType": "address",
							"name": "",
							"type": "address"
						}
					]
				},
				{
					"inputs": [
						{
							"internalType": "uint256",
							"name": "proposalId",
							"type": "uint256"
						}
					],
					"stateMutability": "view",
					"type": "function",
					"name": "proposalSnapshot",
					"outputs": [
						{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}
					]
				},
				{
					"inputs": [],
					"stateMutability": "view",
					"type": "function",
					"name": "proposalThreshold",
					"outputs": [
						{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}
					]
				},
				{
					"inputs": [
						{
							"internalType": "address[]",
							"name": "targets",
							"type": "address[]"
						},
						{
							"internalType": "uint256[]",
							"name": "values",
							"type": "uint256[]"
						},
						{
							"internalType": "bytes[]",
							"name": "calldatas",
							"type": "bytes[]"
						},
						{
							"internalType": "string",
							"name": "description",
							"type": "string"
						}
					],
					"stateMutability": "nonpayable",
					"type": "function",
					"name": "propose",
					"outputs": [
						{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}
					]
				},
				{
					"inputs": [
						{
							"internalType": "uint256",
							"name": "timepoint",
							"type": "uint256"
						}
					],
					"stateMutability": "view",
					"type": "function",
					"name": "quorum",
					"outputs": [
						{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}
					]
				},
				{
					"inputs": [
						{
							"internalType": "address",
							"name": "target",
							"type": "address"
						},
						{
							"internalType": "uint256",
							"name": "value",
							"type": "uint256"
						},
						{
							"internalType": "bytes",
							"name": "data",
							"type": "bytes"
						}
					],
					"stateMutability": "payable",
					"type": "function",
					"name": "relay"
				},
				{
					"inputs": [
						{
							"internalType": "uint256",
							"name": "proposalId",
							"type": "uint256"
						}
					],
					"stateMutability": "view",
					"type": "function",
					"name": "state",
					"outputs": [
						{
							"internalType": "enum IGovernor.ProposalState",
							"name": "",
							"type": "uint8"
						}
					]
				},
				{
					"inputs": [
						{
							"internalType": "bytes4",
							"name": "interfaceId",
							"type": "bytes4"
						}
					],
					"stateMutability": "view",
					"type": "function",
					"name": "supportsInterface",
					"outputs": [
						{
							"internalType": "bool",
							"name": "",
							"type": "bool"
						}
					]
				},
				{
					"inputs": [],
					"stateMutability": "view",
					"type": "function",
					"name": "version",
					"outputs": [
						{
							"internalType": "string",
							"name": "",
							"type": "string"
						}
					]
				},
				{
					"inputs": [],
					"stateMutability": "view",
					"type": "function",
					"name": "votingDelay",
					"outputs": [
						{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}
					]
				},
				{
					"inputs": [],
					"stateMutability": "view",
					"type": "function",
					"name": "votingPeriod",
					"outputs": [
						{
							"internalType": "uint256",
							"name": "",
							"type": "uint256"
						}
					]
				},
				{
					"inputs": [],
					"stateMutability": "payable",
					"type": "receive"
				}
			],
			"devdoc": {
				"kind": "dev",
				"methods": {
					"CLOCK_MODE()": {
						"details": "See EIP-6372."
					},
					"COUNTING_MODE()": {
						"details": "A description of the possible `support` values for {castVote} and the way these votes are counted, meant to be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of key-value pairs that each describe one aspect, for example `support=bravo&quorum=for,abstain`. There are 2 standard keys: `support` and `quorum`. - `support=bravo` refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in `GovernorBravo`. - `quorum=bravo` means that only For votes are counted towards quorum. - `quorum=for,abstain` means that both For and Abstain votes are counted towards quorum. If a counting module makes use of encoded `params`, it should  include this under a `params` key with a unique name that describes the behavior. For example: - `params=fractional` might refer to a scheme where votes are divided fractionally between for/against/abstain. - `params=erc721` might refer to a scheme where specific NFTs are delegated to vote. NOTE: The string can be decoded by the standard https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[`URLSearchParams`] JavaScript class."
					},
					"cancel(address[],uint256[],bytes[],bytes32)": {
						"details": "See {IGovernor-cancel}."
					},
					"castVote(uint256,uint8)": {
						"details": "See {IGovernor-castVote}."
					},
					"castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)": {
						"details": "See {IGovernor-castVoteBySig}."
					},
					"castVoteWithReason(uint256,uint8,string)": {
						"details": "See {IGovernor-castVoteWithReason}."
					},
					"castVoteWithReasonAndParams(uint256,uint8,string,bytes)": {
						"details": "See {IGovernor-castVoteWithReasonAndParams}."
					},
					"castVoteWithReasonAndParamsBySig(uint256,uint8,string,bytes,uint8,bytes32,bytes32)": {
						"details": "See {IGovernor-castVoteWithReasonAndParamsBySig}."
					},
					"clock()": {
						"details": "See {IERC6372}"
					},
					"constructor": {
						"details": "Sets the value for {name} and {version}"
					},
					"eip712Domain()": {
						"details": "See {EIP-5267}. _Available since v4.9._"
					},
					"execute(address[],uint256[],bytes[],bytes32)": {
						"details": "See {IGovernor-execute}."
					},
					"getVotes(address,uint256)": {
						"details": "See {IGovernor-getVotes}."
					},
					"getVotesWithParams(address,uint256,bytes)": {
						"details": "See {IGovernor-getVotesWithParams}."
					},
					"hasVoted(uint256,address)": {
						"details": "Returns whether `account` has cast a vote on `proposalId`."
					},
					"hashProposal(address[],uint256[],bytes[],bytes32)": {
						"details": "See {IGovernor-hashProposal}. The proposal id is produced by hashing the ABI encoded `targets` array, the `values` array, the `calldatas` array and the descriptionHash (bytes32 which itself is the keccak256 hash of the description string). This proposal id can be produced from the proposal data which is part of the {ProposalCreated} event. It can even be computed in advance, before the proposal is submitted. Note that the chainId and the governor address are not part of the proposal id computation. Consequently, the same proposal (with same operation and same description) will have the same id if submitted on multiple governors across multiple networks. This also means that in order to execute the same operation twice (on the same governor) the proposer will have to change the description in order to avoid proposal id conflicts."
					},
					"name()": {
						"details": "See {IGovernor-name}."
					},
					"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {
						"details": "See {IERC1155Receiver-onERC1155BatchReceived}."
					},
					"onERC1155Received(address,address,uint256,uint256,bytes)": {
						"details": "See {IERC1155Receiver-onERC1155Received}."
					},
					"onERC721Received(address,address,uint256,bytes)": {
						"details": "See {IERC721Receiver-onERC721Received}."
					},
					"proposalDeadline(uint256)": {
						"details": "See {IGovernor-proposalDeadline}."
					},
					"proposalProposer(uint256)": {
						"details": "Returns the account that created a given proposal."
					},
					"proposalSnapshot(uint256)": {
						"details": "See {IGovernor-proposalSnapshot}."
					},
					"proposalThreshold()": {
						"details": "Part of the Governor Bravo's interface: _\"The number of votes required in order for a voter to become a proposer\"_."
					},
					"propose(address[],uint256[],bytes[],string)": {
						"details": "See {IGovernor-propose}. This function has opt-in frontrunning protection, described in {_isValidDescriptionForProposer}."
					},
					"quorum(uint256)": {
						"details": "Minimum number of cast voted required for a proposal to be successful. NOTE: The `timepoint` parameter corresponds to the snapshot used for counting vote. This allows to scale the quorum depending on values such as the totalSupply of a token at this timepoint (see {ERC20Votes})."
					},
					"relay(address,uint256,bytes)": {
						"details": "Relays a transaction or function call to an arbitrary target. In cases where the governance executor is some contract other than the governor itself, like when using a timelock, this function can be invoked in a governance proposal to recover tokens or Ether that was sent to the governor contract by mistake. Note that if the executor is simply the governor itself, use of `relay` is redundant."
					},
					"state(uint256)": {
						"details": "See {IGovernor-state}."
					},
					"supportsInterface(bytes4)": {
						"details": "See {IERC165-supportsInterface}."
					},
					"version()": {
						"details": "See {IGovernor-version}."
					},
					"votingDelay()": {
						"details": "Delay, between the proposal is created and the vote starts. The unit this duration is expressed in depends on the clock (see EIP-6372) this contract uses. This can be increased to leave time for users to buy voting power, or delegate it, before the voting of a proposal starts."
					},
					"votingPeriod()": {
						"details": "Delay between the vote start and vote end. The unit this duration is expressed in depends on the clock (see EIP-6372) this contract uses. NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting duration compared to the voting delay."
					}
				},
				"version": 1
			},
			"userdoc": {
				"kind": "user",
				"methods": {
					"CLOCK_MODE()": {
						"notice": "module:core"
					},
					"COUNTING_MODE()": {
						"notice": "module:voting"
					},
					"clock()": {
						"notice": "module:core"
					},
					"hasVoted(uint256,address)": {
						"notice": "module:voting"
					},
					"quorum(uint256)": {
						"notice": "module:user-config"
					},
					"votingDelay()": {
						"notice": "module:user-config"
					},
					"votingPeriod()": {
						"notice": "module:user-config"
					}
				},
				"version": 1
			}
		},
		"settings": {
			"remappings": [
				"@openzeppelin/=lib/openzeppelin-contracts/",
				"ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
				"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
				"forge-std/=lib/forge-std/src/",
				"openzeppelin-contracts/=lib/openzeppelin-contracts/",
				"openzeppelin/=lib/openzeppelin-contracts/contracts/"
			],
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"metadata": {
				"bytecodeHash": "ipfs"
			},
			"compilationTarget": {
				"lib/openzeppelin-contracts/contracts/governance/Governor.sol": "Governor"
			},
			"evmVersion": "cancun",
			"libraries": {}
		},
		"sources": {
			"lib/openzeppelin-contracts/contracts/governance/Governor.sol": {
				"keccak256": "0x471e9425ad9a182c6abdc02bc408ca788b935c31c3bfa3e80b7cb556448ecb8f",
				"urls": [
					"bzz-raw://60fba870e97eb84b145fff2df01da8dad8e26e2d540c4f7ae22615e8d4511be4",
					"dweb:/ipfs/QmbJegvJ16YAyiVP3J8oFun4zsoPfjj1KEJ6ZtWgJYffyw"
				],
				"license": "MIT"
			},
			"lib/openzeppelin-contracts/contracts/governance/IGovernor.sol": {
				"keccak256": "0x2bca164e61152f22bd4be7f444d40a46f7b13aa3b7b7fd6b45aa2d869e72f6d7",
				"urls": [
					"bzz-raw://5ed8cf61b5ec618f839ca35fd2d614aa83f252930dcc1c9fdf6259d6e381644d",
					"dweb:/ipfs/QmSjHjCsr9aSudtFJWZ1Pj76FVzUEEpwmFBGnxoRftVN7g"
				],
				"license": "MIT"
			},
			"lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol": {
				"keccak256": "0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a",
				"urls": [
					"bzz-raw://7b652499d098e88d8d878374616bb58434301061cae2253298b3f374044e0ddb",
					"dweb:/ipfs/QmbhAzctqo5jrSKU6idHdVyqfmzCcDbNUPvmx4GiXxfA6q"
				],
				"license": "MIT"
			},
			"lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol": {
				"keccak256": "0xac6c2efc64baccbde4904ae18ed45139c9aa8cff96d6888344d1e4d2eb8b659f",
				"urls": [
					"bzz-raw://6e416a280c610b6b7a5f158e4a41aacfaec01ef14d5d1de13b46be9e090265fc",
					"dweb:/ipfs/QmYZP2KrdyccBbhLZT42auhvBTMkwiwUS3V6HWb42rbwbG"
				],
				"license": "MIT"
			},
			"lib/openzeppelin-contracts/contracts/interfaces/IERC6372.sol": {
				"keccak256": "0xcaea9aeda3816ba872358c828f4f01455c22ae48ced49c4c7d72bd74176c09b9",
				"urls": [
					"bzz-raw://16ff22d8df5aee94510ee43d361b6147caef164941a684cedcb75be44f351fe6",
					"dweb:/ipfs/QmaCCwMdHVdPApuEJHLZapSJyA7mp5dAugpma3VUzWGd8E"
				],
				"license": "MIT"
			},
			"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol": {
				"keccak256": "0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b",
				"urls": [
					"bzz-raw://0e28648f994abf1d6bc345644a361cc0b7efa544f8bc0c8ec26011fed85a91ec",
					"dweb:/ipfs/QmVVE7AiRjKaQYYji7TkjmTeVzGpNmms5eoxqTCfvvpj6D"
				],
				"license": "MIT"
			},
			"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol": {
				"keccak256": "0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da",
				"urls": [
					"bzz-raw://6e75cf83beb757b8855791088546b8337e9d4684e169400c20d44a515353b708",
					"dweb:/ipfs/QmYvPafLfoquiDMEj7CKHtvbgHu7TJNPSVPSCjrtjV8HjV"
				],
				"license": "MIT"
			},
			"lib/openzeppelin-contracts/contracts/utils/Address.sol": {
				"keccak256": "0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa",
				"urls": [
					"bzz-raw://2455248c8ddd9cc6a7af76a13973cddf222072427e7b0e2a7d1aff345145e931",
					"dweb:/ipfs/QmfYjnjRbWqYpuxurqveE6HtzsY1Xx323J428AKQgtBJZm"
				],
				"license": "MIT"
			},
			"lib/openzeppelin-contracts/contracts/utils/Context.sol": {
				"keccak256": "0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439",
				"urls": [
					"bzz-raw://a367861093b74443b137564d3f3c472f70bcf114739e62059c939f25e315706c",
					"dweb:/ipfs/Qmd7JMpcxD9RuQjK3uM3EzJUgSqdN8vzp8eytEiuwxQJ6h"
				],
				"license": "MIT"
			},
			"lib/openzeppelin-contracts/contracts/utils/ShortStrings.sol": {
				"keccak256": "0xc0e310c163edf15db45d4ff938113ab357f94fa86e61ea8e790853c4d2e13256",
				"urls": [
					"bzz-raw://04db5bc05dcb05ba1f6ca2dfbead17adc8a2e2f911aa80b05e7a36d9eaf96516",
					"dweb:/ipfs/QmVkfHZbXVBUPsTopueCn3qGJX8aEjahFF3Fn4NcygLNm5"
				],
				"license": "MIT"
			},
			"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol": {
				"keccak256": "0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899",
				"urls": [
					"bzz-raw://e26daf81e2252dc1fe1ce0e4b55c2eb7c6d1ee84ae6558d1a9554432ea1d32da",
					"dweb:/ipfs/Qmb1UANWiWq5pCKbmHSu772hd4nt374dVaghGmwSVNuk8Q"
				],
				"license": "MIT"
			},
			"lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
				"keccak256": "0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0",
				"urls": [
					"bzz-raw://b81d9ff6559ea5c47fc573e17ece6d9ba5d6839e213e6ebc3b4c5c8fe4199d7f",
					"dweb:/ipfs/QmPCW1bFisUzJkyjroY3yipwfism9RRCigCcK1hbXtVM8n"
				],
				"license": "MIT"
			},
			"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol": {
				"keccak256": "0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58",
				"urls": [
					"bzz-raw://8b93a1e39a4a19eba1600b92c96f435442db88cac91e315c8291547a2a7bcfe2",
					"dweb:/ipfs/QmTm34KVe6uZBZwq8dZDNWwPcm24qBJdxqL3rPxBJ4LrMv"
				],
				"license": "MIT"
			},
			"lib/openzeppelin-contracts/contracts/utils/cryptography/EIP712.sol": {
				"keccak256": "0x8432884527a7ad91e6eed1cfc5a0811ae2073e5bca107bd0ca442e9236b03dbd",
				"urls": [
					"bzz-raw://e3aa0eadab7aafcf91a95684765f778f64386f0368de88522ce873c21385278a",
					"dweb:/ipfs/QmPfaVAqWgH1QsT3dHVuL6jwMZbVKdoP8w1PvpiPT2FPWd"
				],
				"license": "MIT"
			},
			"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
				"keccak256": "0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b",
				"urls": [
					"bzz-raw://fb0048dee081f6fffa5f74afc3fb328483c2a30504e94a0ddd2a5114d731ec4d",
					"dweb:/ipfs/QmZptt1nmYoA5SgjwnSgWqgUSDgm4q52Yos3xhnMv3MV43"
				],
				"license": "MIT"
			},
			"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
				"keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
				"urls": [
					"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
					"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
				],
				"license": "MIT"
			},
			"lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
				"keccak256": "0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3",
				"urls": [
					"bzz-raw://cc8841b3cd48ad125e2f46323c8bad3aa0e88e399ec62acb9e57efa7e7c8058c",
					"dweb:/ipfs/QmSqE4mXHA2BXW58deDbXE8MTcsL5JSKNDbm23sVQxRLPS"
				],
				"license": "MIT"
			},
			"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
				"keccak256": "0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad",
				"urls": [
					"bzz-raw://495145362c7ff1c9ca88c58bbbbcb412e3c2004406647412394486552ff6c278",
					"dweb:/ipfs/QmNNCeng6d5eRPDn6tkWSQhjE39XWfQEfjA63rRwHmr1iH"
				],
				"license": "MIT"
			},
			"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
				"keccak256": "0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc",
				"urls": [
					"bzz-raw://c50fcc459e49a9858b6d8ad5f911295cb7c9ab57567845a250bf0153f84a95c7",
					"dweb:/ipfs/QmcEW85JRzvDkQggxiBBLVAasXWdkhEysqypj9EaB6H2g6"
				],
				"license": "MIT"
			},
			"lib/openzeppelin-contracts/contracts/utils/structs/DoubleEndedQueue.sol": {
				"keccak256": "0xb5fbb623dec53bb9b6c1b738b4ab6540a04ac5dc2ac94d95fa3ebfd22898559c",
				"urls": [
					"bzz-raw://4a6e7f26c0c688a987c19c8b0997c7e47c33f7717b6293a487afe8429d95b8e7",
					"dweb:/ipfs/QmVrmXcQ7KLM5fw4PWeJ8j4nnmfHkjpFPariMMh5UvsEVD"
				],
				"license": "MIT"
			}
		},
		"version": 1
	},
	"id": 2
}